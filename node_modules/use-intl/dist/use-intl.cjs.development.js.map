{"version":3,"file":"use-intl.cjs.development.js","sources":["../src/core/IntlError.tsx","../src/core/convertFormatsToIntlMessageFormat.tsx","../src/core/defaults.tsx","../src/core/createBaseTranslator.tsx","../src/core/resolveNamespace.tsx","../src/core/createTranslatorImpl.tsx","../src/core/createTranslator.tsx","../src/core/createFormatter.tsx","../src/core/createIntl.tsx","../src/react/IntlContext.tsx","../src/core/validateMessages.tsx","../src/react/getInitializedConfig.tsx","../src/react/IntlProvider.tsx","../src/react/useIntlContext.tsx","../src/react/useTranslationsImpl.tsx","../src/react/useTranslations.tsx","../src/react/useLocale.tsx","../src/react/useNow.tsx","../src/react/useTimeZone.tsx","../src/react/useMessages.tsx","../src/react/useFormatter.tsx","../src/react/useIntl.tsx"],"sourcesContent":["export enum IntlErrorCode {\n  MISSING_MESSAGE = 'MISSING_MESSAGE',\n  MISSING_FORMAT = 'MISSING_FORMAT',\n  INSUFFICIENT_PATH = 'INSUFFICIENT_PATH',\n  INVALID_MESSAGE = 'INVALID_MESSAGE',\n  INVALID_KEY = 'INVALID_KEY',\n  FORMATTING_ERROR = 'FORMATTING_ERROR'\n}\n\nexport default class IntlError extends Error {\n  public readonly code: IntlErrorCode;\n  public readonly originalMessage: string | undefined;\n\n  constructor(code: IntlErrorCode, originalMessage?: string) {\n    let message: string = code;\n    if (originalMessage) {\n      message += ': ' + originalMessage;\n    }\n    super(message);\n\n    this.code = code;\n    if (originalMessage) {\n      this.originalMessage = originalMessage;\n    }\n  }\n}\n","import {Formats as IntlFormats} from 'intl-messageformat';\nimport DateTimeFormatOptions from './DateTimeFormatOptions';\nimport Formats from './Formats';\nimport TimeZone from './TimeZone';\n\nfunction setTimeZoneInFormats(\n  formats: Record<string, DateTimeFormatOptions> | undefined,\n  timeZone: TimeZone\n) {\n  if (!formats) return formats;\n\n  // The only way to set a time zone with `intl-messageformat` is to merge it into the formats\n  // https://github.com/formatjs/formatjs/blob/8256c5271505cf2606e48e3c97ecdd16ede4f1b5/packages/intl/src/message.ts#L15\n  return Object.keys(formats).reduce(\n    (acc: Record<string, DateTimeFormatOptions>, key) => {\n      acc[key] = {\n        timeZone,\n        ...formats[key]\n      };\n      return acc;\n    },\n    {}\n  );\n}\n\n/**\n * `intl-messageformat` uses separate keys for `date` and `time`, but there's\n * only one native API: `Intl.DateTimeFormat`. Additionally you might want to\n * include both a time and a date in a value, therefore the separation doesn't\n * seem so useful. We offer a single `dateTime` namespace instead, but we have\n * to convert the format before `intl-messageformat` can be used.\n */\nexport default function convertFormatsToIntlMessageFormat(\n  formats: Partial<Formats>,\n  timeZone?: TimeZone\n): Partial<IntlFormats> {\n  const formatsWithTimeZone = timeZone\n    ? {...formats, dateTime: setTimeZoneInFormats(formats.dateTime, timeZone)}\n    : formats;\n\n  return {\n    ...formatsWithTimeZone,\n    date: formatsWithTimeZone?.dateTime,\n    time: formatsWithTimeZone?.dateTime\n  };\n}\n","import IntlError from './IntlError';\n\n/**\n * Contains defaults that are used for all entry points into the core.\n * See also `InitializedIntlConfiguration`.\n */\n\nexport function defaultGetMessageFallback(props: {\n  error: IntlError;\n  key: string;\n  namespace?: string;\n}) {\n  return [props.namespace, props.key].filter((part) => part != null).join('.');\n}\n\nexport function defaultOnError(error: IntlError) {\n  console.error(error);\n}\n","// eslint-disable-next-line import/no-named-as-default -- False positive\nimport IntlMessageFormat from 'intl-messageformat';\nimport {\n  cloneElement,\n  isValidElement,\n  ReactElement,\n  ReactNode,\n  ReactNodeArray\n} from 'react';\nimport AbstractIntlMessages from './AbstractIntlMessages';\nimport Formats from './Formats';\nimport {InitializedIntlConfig} from './IntlConfig';\nimport IntlError, {IntlErrorCode} from './IntlError';\nimport TranslationValues, {RichTranslationValues} from './TranslationValues';\nimport convertFormatsToIntlMessageFormat from './convertFormatsToIntlMessageFormat';\nimport {defaultGetMessageFallback, defaultOnError} from './defaults';\nimport MessageKeys from './utils/MessageKeys';\nimport NestedKeyOf from './utils/NestedKeyOf';\nimport NestedValueOf from './utils/NestedValueOf';\n\nfunction resolvePath(\n  messages: AbstractIntlMessages | undefined,\n  key: string,\n  namespace?: string\n) {\n  if (!messages) {\n    throw new Error(\n      process.env.NODE_ENV !== 'production'\n        ? `No messages available at \\`${namespace}\\`.`\n        : undefined\n    );\n  }\n\n  let message = messages;\n\n  key.split('.').forEach((part) => {\n    const next = (message as any)[part];\n\n    if (part == null || next == null) {\n      throw new Error(\n        process.env.NODE_ENV !== 'production'\n          ? `Could not resolve \\`${key}\\` in ${\n              namespace ? `\\`${namespace}\\`` : 'messages'\n            }.`\n          : undefined\n      );\n    }\n\n    message = next;\n  });\n\n  return message;\n}\n\nfunction prepareTranslationValues(values: RichTranslationValues) {\n  if (Object.keys(values).length === 0) return undefined;\n\n  // Workaround for https://github.com/formatjs/formatjs/issues/1467\n  const transformedValues: RichTranslationValues = {};\n  Object.keys(values).forEach((key) => {\n    let index = 0;\n    const value = values[key];\n\n    let transformed;\n    if (typeof value === 'function') {\n      transformed = (chunks: ReactNode) => {\n        const result = value(chunks);\n\n        return isValidElement(result)\n          ? cloneElement(result, {key: key + index++})\n          : result;\n      };\n    } else {\n      transformed = value;\n    }\n\n    transformedValues[key] = transformed;\n  });\n\n  return transformedValues;\n}\n\nexport function getMessagesOrError<Messages extends AbstractIntlMessages>({\n  messages,\n  namespace,\n  onError = defaultOnError\n}: {\n  messages: Messages;\n  namespace?: string;\n  onError?(error: IntlError): void;\n}) {\n  try {\n    if (!messages) {\n      throw new Error(\n        process.env.NODE_ENV !== 'production'\n          ? `No messages were configured on the provider.`\n          : undefined\n      );\n    }\n\n    const retrievedMessages = namespace\n      ? resolvePath(messages, namespace)\n      : messages;\n\n    if (!retrievedMessages) {\n      throw new Error(\n        process.env.NODE_ENV !== 'production'\n          ? `No messages for namespace \\`${namespace}\\` found.`\n          : undefined\n      );\n    }\n\n    return retrievedMessages;\n  } catch (error) {\n    const intlError = new IntlError(\n      IntlErrorCode.MISSING_MESSAGE,\n      (error as Error).message\n    );\n    onError(intlError);\n    return intlError;\n  }\n}\n\nexport type CreateBaseTranslatorProps<Messages> = InitializedIntlConfig & {\n  cachedFormatsByLocale?: Record<string, Record<string, IntlMessageFormat>>;\n  defaultTranslationValues?: RichTranslationValues;\n  namespace?: string;\n  messagesOrError: Messages | IntlError;\n};\n\nexport default function createBaseTranslator<\n  Messages extends AbstractIntlMessages,\n  NestedKey extends NestedKeyOf<Messages>\n>({\n  cachedFormatsByLocale,\n  defaultTranslationValues,\n  formats: globalFormats,\n  getMessageFallback = defaultGetMessageFallback,\n  locale,\n  messagesOrError,\n  namespace,\n  onError,\n  timeZone\n}: CreateBaseTranslatorProps<Messages>) {\n  function getFallbackFromErrorAndNotify(\n    key: string,\n    code: IntlErrorCode,\n    message?: string\n  ) {\n    const error = new IntlError(code, message);\n    onError(error);\n    return getMessageFallback({error, key, namespace});\n  }\n\n  function translateBaseFn(\n    /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */\n    key: string,\n    /** Key value pairs for values to interpolate into the message. */\n    values?: RichTranslationValues,\n    /** Provide custom formats for numbers, dates and times. */\n    formats?: Partial<Formats>\n  ): string | ReactElement | ReactNodeArray {\n    if (messagesOrError instanceof IntlError) {\n      // We have already warned about this during render\n      return getMessageFallback({\n        error: messagesOrError,\n        key,\n        namespace\n      });\n    }\n    const messages = messagesOrError;\n\n    let message;\n    try {\n      message = resolvePath(messages, key, namespace);\n    } catch (error) {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.MISSING_MESSAGE,\n        (error as Error).message\n      );\n    }\n\n    function joinPath(parts: Array<string | undefined>) {\n      return parts.filter((part) => part != null).join('.');\n    }\n\n    const cacheKey = joinPath([namespace, key, String(message)]);\n\n    let messageFormat;\n    if (cachedFormatsByLocale?.[locale]?.[cacheKey]) {\n      messageFormat = cachedFormatsByLocale?.[locale][cacheKey];\n    } else {\n      if (typeof message === 'object') {\n        let code, errorMessage;\n        if (Array.isArray(message)) {\n          code = IntlErrorCode.INVALID_MESSAGE;\n          if (process.env.NODE_ENV !== 'production') {\n            errorMessage = `Message at \\`${joinPath([\n              namespace,\n              key\n            ])}\\` resolved to an array, but only strings are supported. See https://next-intl-docs.vercel.app/docs/usage/messages#arrays-of-messages`;\n          }\n        } else {\n          code = IntlErrorCode.INSUFFICIENT_PATH;\n          if (process.env.NODE_ENV !== 'production') {\n            errorMessage = `Message at \\`${joinPath([\n              namespace,\n              key\n            ])}\\` resolved to an object, but only strings are supported. Use a \\`.\\` to retrieve nested messages. See https://next-intl-docs.vercel.app/docs/usage/messages#structuring-messages`;\n          }\n        }\n\n        return getFallbackFromErrorAndNotify(key, code, errorMessage);\n      }\n\n      try {\n        messageFormat = new IntlMessageFormat(\n          message,\n          locale,\n          convertFormatsToIntlMessageFormat(\n            {...globalFormats, ...formats},\n            timeZone\n          )\n        );\n      } catch (error) {\n        return getFallbackFromErrorAndNotify(\n          key,\n          IntlErrorCode.INVALID_MESSAGE,\n          (error as Error).message\n        );\n      }\n\n      if (cachedFormatsByLocale) {\n        if (!cachedFormatsByLocale[locale]) {\n          cachedFormatsByLocale[locale] = {};\n        }\n        cachedFormatsByLocale[locale][cacheKey] = messageFormat;\n      }\n    }\n\n    try {\n      const formattedMessage = messageFormat.format(\n        // @ts-ignore `intl-messageformat` expects a different format\n        // for rich text elements since a recent minor update. This\n        // needs to be evaluated in detail, possibly also in regards\n        // to be able to format to parts.\n        prepareTranslationValues({...defaultTranslationValues, ...values})\n      );\n\n      if (formattedMessage == null) {\n        throw new Error(\n          process.env.NODE_ENV !== 'production'\n            ? `Unable to format \\`${key}\\` in ${\n                namespace ? `namespace \\`${namespace}\\`` : 'messages'\n              }`\n            : undefined\n        );\n      }\n\n      // Limit the function signature to return strings or React elements\n      return isValidElement(formattedMessage) ||\n        // Arrays of React elements\n        Array.isArray(formattedMessage) ||\n        typeof formattedMessage === 'string'\n        ? formattedMessage\n        : String(formattedMessage);\n    } catch (error) {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.FORMATTING_ERROR,\n        (error as Error).message\n      );\n    }\n  }\n\n  function translateFn<\n    TargetKey extends MessageKeys<\n      NestedValueOf<Messages, NestedKey>,\n      NestedKeyOf<NestedValueOf<Messages, NestedKey>>\n    >\n  >(\n    /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */\n    key: TargetKey,\n    /** Key value pairs for values to interpolate into the message. */\n    values?: TranslationValues,\n    /** Provide custom formats for numbers, dates and times. */\n    formats?: Partial<Formats>\n  ): string {\n    const result = translateBaseFn(key, values, formats);\n\n    if (typeof result !== 'string') {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.INVALID_MESSAGE,\n        process.env.NODE_ENV !== 'production'\n          ? `The message \\`${key}\\` in ${\n              namespace ? `namespace \\`${namespace}\\`` : 'messages'\n            } didn't resolve to a string. If you want to format rich text, use \\`t.rich\\` instead.`\n          : undefined\n      );\n    }\n\n    return result;\n  }\n\n  translateFn.rich = translateBaseFn;\n\n  translateFn.raw = (\n    /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */\n    key: string\n  ): any => {\n    if (messagesOrError instanceof IntlError) {\n      // We have already warned about this during render\n      return getMessageFallback({\n        error: messagesOrError,\n        key,\n        namespace\n      });\n    }\n    const messages = messagesOrError;\n\n    try {\n      return resolvePath(messages, key, namespace);\n    } catch (error) {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.MISSING_MESSAGE,\n        (error as Error).message\n      );\n    }\n  };\n\n  return translateFn;\n}\n","/**\n * For the strictly typed messages to work we have to wrap the namespace into\n * a mandatory prefix. See https://stackoverflow.com/a/71529575/343045\n */\nexport default function resolveNamespace(\n  namespace: string,\n  namespacePrefix: string\n) {\n  return namespace === namespacePrefix\n    ? undefined\n    : namespace.slice((namespacePrefix + '.').length);\n}\n","import AbstractIntlMessages from './AbstractIntlMessages';\nimport {InitializedIntlConfig} from './IntlConfig';\nimport IntlError, {IntlErrorCode} from './IntlError';\nimport {RichTranslationValues, TranslationValue} from './TranslationValues';\nimport createBaseTranslator, {getMessagesOrError} from './createBaseTranslator';\nimport resolveNamespace from './resolveNamespace';\nimport NestedKeyOf from './utils/NestedKeyOf';\n\nexport type CoreRichTranslationValues = Record<\n  string,\n  TranslationValue | ((chunks: string) => string)\n>;\n\nexport type CreateTranslatorImplProps<Messages> = Omit<\n  InitializedIntlConfig,\n  'messages'\n> & {\n  namespace: string;\n  messages: Messages;\n};\n\nexport default function createTranslatorImpl<\n  Messages extends AbstractIntlMessages,\n  NestedKey extends NestedKeyOf<Messages>\n>(\n  {\n    getMessageFallback,\n    messages,\n    namespace,\n    onError,\n    ...rest\n  }: CreateTranslatorImplProps<Messages>,\n  namespacePrefix: string\n) {\n  // The `namespacePrefix` is part of the type system.\n  // See the comment in the function invocation.\n  messages = messages[namespacePrefix] as Messages;\n  namespace = resolveNamespace(namespace, namespacePrefix) as NestedKey;\n\n  const translator = createBaseTranslator<Messages, NestedKey>({\n    ...rest,\n    onError,\n    getMessageFallback,\n    messagesOrError: getMessagesOrError({\n      messages,\n      namespace,\n      onError\n    }) as Messages | IntlError\n  });\n\n  const originalRich = translator.rich;\n\n  function base(...args: Parameters<typeof translator>) {\n    return translator(...args);\n  }\n\n  // Augment `t.rich` to return plain strings\n  base.rich = (\n    key: Parameters<typeof originalRich>[0],\n    /** Key value pairs for values to interpolate into the message. */\n    values: CoreRichTranslationValues,\n    formats?: Parameters<typeof originalRich>[2]\n  ): string => {\n    // `chunks` is returned as a string when no React element\n    // is used, therefore it's safe to cast this type.\n    const result = originalRich(key, values as RichTranslationValues, formats);\n\n    // When only string chunks are provided to the parser, only strings should be returned here.\n    if (typeof result !== 'string') {\n      const error = new IntlError(\n        IntlErrorCode.FORMATTING_ERROR,\n        process.env.NODE_ENV !== 'production'\n          ? \"`createTranslator` only accepts functions for rich text formatting that receive and return strings.\\n\\nE.g. t.rich('rich', {b: (chunks) => `<b>${chunks}</b>`})\"\n          : undefined\n      );\n\n      onError(error);\n      return getMessageFallback({error, key, namespace});\n    }\n\n    return result;\n  };\n\n  base.raw = translator.raw;\n\n  return base;\n}\n","import Formats from './Formats';\nimport IntlConfig from './IntlConfig';\nimport TranslationValues from './TranslationValues';\nimport createTranslatorImpl, {\n  CoreRichTranslationValues\n} from './createTranslatorImpl';\nimport {defaultGetMessageFallback, defaultOnError} from './defaults';\nimport MessageKeys from './utils/MessageKeys';\nimport NamespaceKeys from './utils/NamespaceKeys';\nimport NestedKeyOf from './utils/NestedKeyOf';\nimport NestedValueOf from './utils/NestedValueOf';\n\n/**\n * Translates messages from the given namespace by using the ICU syntax.\n * See https://formatjs.io/docs/core-concepts/icu-syntax.\n *\n * If no namespace is provided, all available messages are returned.\n * The namespace can also indicate nesting by using a dot\n * (e.g. `namespace.Component`).\n */\nexport default function createTranslator<\n  NestedKey extends NamespaceKeys<\n    IntlMessages,\n    NestedKeyOf<IntlMessages>\n  > = never\n>({\n  getMessageFallback = defaultGetMessageFallback,\n  messages,\n  namespace,\n  onError = defaultOnError,\n  ...rest\n}: Omit<IntlConfig<IntlMessages>, 'defaultTranslationValues' | 'messages'> & {\n  messages: NonNullable<IntlConfig<IntlMessages>['messages']>;\n  namespace?: NestedKey;\n}): // Explicitly defining the return type is necessary as TypeScript would get it wrong\n{\n  // Default invocation\n  <\n    TargetKey extends MessageKeys<\n      NestedValueOf<\n        {'!': IntlMessages},\n        [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n      >,\n      NestedKeyOf<\n        NestedValueOf<\n          {'!': IntlMessages},\n          [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n        >\n      >\n    >\n  >(\n    key: TargetKey,\n    values?: TranslationValues,\n    formats?: Partial<Formats>\n  ): string;\n\n  // `rich`\n  rich<\n    TargetKey extends MessageKeys<\n      NestedValueOf<\n        {'!': IntlMessages},\n        [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n      >,\n      NestedKeyOf<\n        NestedValueOf<\n          {'!': IntlMessages},\n          [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n        >\n      >\n    >\n  >(\n    key: TargetKey,\n    values?: CoreRichTranslationValues,\n    formats?: Partial<Formats>\n  ): string;\n\n  // `raw`\n  raw<\n    TargetKey extends MessageKeys<\n      NestedValueOf<\n        {'!': IntlMessages},\n        [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n      >,\n      NestedKeyOf<\n        NestedValueOf<\n          {'!': IntlMessages},\n          [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n        >\n      >\n    >\n  >(\n    key: TargetKey\n  ): any;\n} {\n  // We have to wrap the actual function so the type inference for the optional\n  // namespace works correctly. See https://stackoverflow.com/a/71529575/343045\n  // The prefix (\"!\") is arbitrary.\n  return createTranslatorImpl<\n    {'!': IntlMessages},\n    [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n  >(\n    {\n      ...rest,\n      onError,\n      getMessageFallback,\n      messages: {'!': messages},\n      // @ts-ignore\n      namespace: namespace ? `!.${namespace}` : '!'\n    },\n    '!'\n  );\n}\n","import DateTimeFormatOptions from './DateTimeFormatOptions';\nimport Formats from './Formats';\nimport IntlError, {IntlErrorCode} from './IntlError';\nimport NumberFormatOptions from './NumberFormatOptions';\nimport TimeZone from './TimeZone';\nimport {defaultOnError} from './defaults';\n\nconst MINUTE = 60;\nconst HOUR = MINUTE * 60;\nconst DAY = HOUR * 24;\nconst WEEK = DAY * 7;\nconst MONTH = DAY * (365 / 12); // Approximation\nconst YEAR = DAY * 365;\n\nfunction getRelativeTimeFormatConfig(seconds: number) {\n  const absValue = Math.abs(seconds);\n  let value, unit: Intl.RelativeTimeFormatUnit;\n\n  // We have to round the resulting values, as `Intl.RelativeTimeFormat`\n  // will include fractions like '2.1 hours ago'.\n\n  if (absValue < MINUTE) {\n    unit = 'second';\n    value = Math.round(seconds);\n  } else if (absValue < HOUR) {\n    unit = 'minute';\n    value = Math.round(seconds / MINUTE);\n  } else if (absValue < DAY) {\n    unit = 'hour';\n    value = Math.round(seconds / HOUR);\n  } else if (absValue < WEEK) {\n    unit = 'day';\n    value = Math.round(seconds / DAY);\n  } else if (absValue < MONTH) {\n    unit = 'week';\n    value = Math.round(seconds / WEEK);\n  } else if (absValue < YEAR) {\n    unit = 'month';\n    value = Math.round(seconds / MONTH);\n  } else {\n    unit = 'year';\n    value = Math.round(seconds / YEAR);\n  }\n\n  return {value, unit};\n}\n\ntype Props = {\n  locale: string;\n  timeZone?: TimeZone;\n  onError?(error: IntlError): void;\n  formats?: Partial<Formats>;\n  now?: Date;\n};\n\nexport default function createFormatter({\n  formats,\n  locale,\n  now: globalNow,\n  onError = defaultOnError,\n  timeZone\n}: Props) {\n  function resolveFormatOrOptions<Options>(\n    typeFormats: Record<string, Options> | undefined,\n    formatOrOptions?: string | Options\n  ) {\n    let options;\n    if (typeof formatOrOptions === 'string') {\n      const formatName = formatOrOptions;\n      options = typeFormats?.[formatName];\n\n      if (!options) {\n        const error = new IntlError(\n          IntlErrorCode.MISSING_FORMAT,\n          process.env.NODE_ENV !== 'production'\n            ? `Format \\`${formatName}\\` is not available. You can configure it on the provider or provide custom options.`\n            : undefined\n        );\n        onError(error);\n        throw error;\n      }\n    } else {\n      options = formatOrOptions;\n    }\n\n    return options;\n  }\n\n  function getFormattedValue<Value, Options>(\n    value: Value,\n    formatOrOptions: string | Options | undefined,\n    typeFormats: Record<string, Options> | undefined,\n    formatter: (options?: Options) => string\n  ) {\n    let options;\n    try {\n      options = resolveFormatOrOptions(typeFormats, formatOrOptions);\n    } catch (error) {\n      return String(value);\n    }\n\n    try {\n      return formatter(options);\n    } catch (error) {\n      onError(\n        new IntlError(IntlErrorCode.FORMATTING_ERROR, (error as Error).message)\n      );\n      return String(value);\n    }\n  }\n\n  function dateTime(\n    /** If a number is supplied, this is interpreted as a UTC timestamp. */\n    value: Date | number,\n    /** If a time zone is supplied, the `value` is converted to that time zone.\n     * Otherwise the user time zone will be used. */\n    formatOrOptions?: string | DateTimeFormatOptions\n  ) {\n    return getFormattedValue(\n      value,\n      formatOrOptions,\n      formats?.dateTime,\n      (options) => {\n        if (timeZone && !options?.timeZone) {\n          options = {...options, timeZone};\n        }\n\n        return new Intl.DateTimeFormat(locale, options).format(value);\n      }\n    );\n  }\n\n  function number(\n    value: number | bigint,\n    formatOrOptions?: string | NumberFormatOptions\n  ) {\n    return getFormattedValue(\n      value,\n      formatOrOptions,\n      formats?.number,\n      (options) => new Intl.NumberFormat(locale, options).format(value)\n    );\n  }\n\n  function relativeTime(\n    /** The date time that needs to be formatted. */\n    date: number | Date,\n    /** The reference point in time to which `date` will be formatted in relation to.  */\n    now?: number | Date\n  ) {\n    try {\n      if (!now) {\n        if (globalNow) {\n          now = globalNow;\n        } else {\n          throw new Error(\n            process.env.NODE_ENV !== 'production'\n              ? `The \\`now\\` parameter wasn't provided and there was no global fallback configured on the provider.`\n              : undefined\n          );\n        }\n      }\n\n      const dateDate = date instanceof Date ? date : new Date(date);\n      const nowDate = now instanceof Date ? now : new Date(now);\n\n      const seconds = (dateDate.getTime() - nowDate.getTime()) / 1000;\n      const {unit, value} = getRelativeTimeFormatConfig(seconds);\n\n      return new Intl.RelativeTimeFormat(locale, {\n        numeric: 'auto'\n      }).format(value, unit);\n    } catch (error) {\n      onError(\n        new IntlError(IntlErrorCode.FORMATTING_ERROR, (error as Error).message)\n      );\n      return String(date);\n    }\n  }\n\n  function list(\n    value: Iterable<string>,\n    formatOrOptions?: string | Intl.ListFormatOptions\n  ) {\n    return getFormattedValue(value, formatOrOptions, formats?.list, (options) =>\n      new Intl.ListFormat(locale, options).format(value)\n    );\n  }\n\n  return {dateTime, number, relativeTime, list};\n}\n","import createFormatter from './createFormatter';\n\n/** @deprecated Switch to `createFormatter` */\nexport default function createIntl(\n  ...args: Parameters<typeof createFormatter>\n) {\n  const formatter = createFormatter(...args);\n  return {\n    formatDateTime: formatter.dateTime,\n    formatNumber: formatter.number,\n    formatRelativeTime: formatter.relativeTime\n  };\n}\n","import {createContext} from 'react';\nimport {InitializedIntlConfig} from '../core/IntlConfig';\n\nconst IntlContext = createContext<InitializedIntlConfig | undefined>(undefined);\n\nexport default IntlContext;\n","import AbstractIntlMessages from './AbstractIntlMessages';\nimport IntlError, {IntlErrorCode} from './IntlError';\n\nfunction validateMessagesSegment(\n  messages: AbstractIntlMessages,\n  invalidKeyLabels: Array<string>,\n  parentPath?: string\n) {\n  Object.entries(messages).forEach(([key, messageOrMessages]) => {\n    if (key.includes('.')) {\n      let keyLabel = key;\n      if (parentPath) keyLabel += ` (at ${parentPath})`;\n      invalidKeyLabels.push(keyLabel);\n    }\n\n    if (messageOrMessages != null && typeof messageOrMessages === 'object') {\n      validateMessagesSegment(\n        messageOrMessages,\n        invalidKeyLabels,\n        [parentPath, key].filter((part) => part != null).join('.')\n      );\n    }\n  });\n}\n\nexport default function validateMessages(\n  messages: AbstractIntlMessages,\n  onError: (error: IntlError) => void\n) {\n  const invalidKeyLabels: Array<string> = [];\n  validateMessagesSegment(messages, invalidKeyLabels);\n\n  if (invalidKeyLabels.length > 0) {\n    onError(\n      new IntlError(\n        IntlErrorCode.INVALID_KEY,\n        process.env.NODE_ENV !== 'production'\n          ? `Namespace keys can not contain the character \".\" as this is used to express nesting. Please remove it or replace it with another character.\n\nInvalid ${\n              invalidKeyLabels.length === 1 ? 'key' : 'keys'\n            }: ${invalidKeyLabels.join(', ')}\n\nIf you're migrating from a flat structure, you can convert your messages as follows:\n\nimport {set} from \"lodash\";\n\nconst input = {\n  \"one.one\": \"1.1\",\n  \"one.two\": \"1.2\",\n  \"two.one.one\": \"2.1.1\"\n};\n\nconst output = Object.entries(input).reduce(\n  (acc, [key, value]) => set(acc, key, value),\n  {}\n);\n\n// Output:\n//\n// {\n//   \"one\": {\n//     \"one\": \"1.1\",\n//     \"two\": \"1.2\"\n//   },\n//   \"two\": {\n//     \"one\": {\n//       \"one\": \"2.1.1\"\n//     }\n//   }\n// }\n`\n          : undefined\n      )\n    );\n  }\n}\n","import IntlConfig from '../core/IntlConfig';\nimport {defaultGetMessageFallback, defaultOnError} from '../core/defaults';\nimport validateMessages from '../core/validateMessages';\n\n/**\n * Enhances the incoming props with defaults.\n */\nexport default function getInitializedConfig<\n  // This is a generic to allow for stricter typing. E.g.\n  // the RSC integration always provides a `now` value.\n  Props extends Omit<IntlConfig, 'children'>\n>({getMessageFallback, messages, onError, ...rest}: Props) {\n  const finalOnError = onError || defaultOnError;\n  const finalGetMessageFallback =\n    getMessageFallback || defaultGetMessageFallback;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (messages) {\n      validateMessages(messages, finalOnError);\n    }\n  }\n\n  return {\n    ...rest,\n    messages,\n    onError: finalOnError,\n    getMessageFallback: finalGetMessageFallback\n  };\n}\n","import React, {ReactNode} from 'react';\nimport IntlConfig from '../core/IntlConfig';\nimport IntlContext from './IntlContext';\nimport getInitializedConfig from './getInitializedConfig';\n\ntype Props = IntlConfig & {\n  children: ReactNode;\n};\n\nexport default function IntlProvider({children, ...props}: Props) {\n  return (\n    <IntlContext.Provider value={getInitializedConfig(props)}>\n      {children}\n    </IntlContext.Provider>\n  );\n}\n","import {useContext} from 'react';\nimport IntlContext from './IntlContext';\n\nexport default function useIntlContext() {\n  const context = useContext(IntlContext);\n\n  if (!context) {\n    throw new Error(\n      process.env.NODE_ENV !== 'production'\n        ? 'No intl context found. Have you configured the provider?'\n        : undefined\n    );\n  }\n\n  return context;\n}\n","// eslint-disable-next-line import/no-named-as-default -- False positive\nimport IntlMessageFormat from 'intl-messageformat';\nimport {useMemo, useRef} from 'react';\nimport AbstractIntlMessages from '../core/AbstractIntlMessages';\nimport createBaseTranslator, {\n  getMessagesOrError\n} from '../core/createBaseTranslator';\nimport resolveNamespace from '../core/resolveNamespace';\nimport NestedKeyOf from '../core/utils/NestedKeyOf';\nimport useIntlContext from './useIntlContext';\n\nexport default function useTranslationsImpl<\n  Messages extends AbstractIntlMessages,\n  NestedKey extends NestedKeyOf<Messages>\n>(allMessages: Messages, namespace: NestedKey, namespacePrefix: string) {\n  const {\n    defaultTranslationValues,\n    formats: globalFormats,\n    getMessageFallback,\n    locale,\n    onError,\n    timeZone\n  } = useIntlContext();\n\n  // The `namespacePrefix` is part of the type system.\n  // See the comment in the hook invocation.\n  allMessages = allMessages[namespacePrefix] as Messages;\n  namespace = resolveNamespace(namespace, namespacePrefix) as NestedKey;\n\n  const cachedFormatsByLocaleRef = useRef<\n    Record<string, Record<string, IntlMessageFormat>>\n  >({});\n\n  const messagesOrError = useMemo(\n    () => getMessagesOrError({messages: allMessages, namespace, onError}),\n    [allMessages, namespace, onError]\n  );\n\n  const translate = useMemo(\n    () =>\n      createBaseTranslator({\n        cachedFormatsByLocale: cachedFormatsByLocaleRef.current,\n        getMessageFallback,\n        messagesOrError,\n        defaultTranslationValues,\n        namespace,\n        onError,\n        formats: globalFormats,\n        locale,\n        timeZone\n      }),\n    [\n      getMessageFallback,\n      messagesOrError,\n      defaultTranslationValues,\n      namespace,\n      onError,\n      globalFormats,\n      locale,\n      timeZone\n    ]\n  );\n\n  return translate;\n}\n","import {ReactElement, ReactNodeArray} from 'react';\nimport Formats from '../core/Formats';\nimport TranslationValues, {\n  RichTranslationValues\n} from '../core/TranslationValues';\nimport MessageKeys from '../core/utils/MessageKeys';\nimport NamespaceKeys from '../core/utils/NamespaceKeys';\nimport NestedKeyOf from '../core/utils/NestedKeyOf';\nimport NestedValueOf from '../core/utils/NestedValueOf';\nimport useIntlContext from './useIntlContext';\nimport useTranslationsImpl from './useTranslationsImpl';\n\n/**\n * Translates messages from the given namespace by using the ICU syntax.\n * See https://formatjs.io/docs/core-concepts/icu-syntax.\n *\n * If no namespace is provided, all available messages are returned.\n * The namespace can also indicate nesting by using a dot\n * (e.g. `namespace.Component`).\n */\nexport default function useTranslations<\n  NestedKey extends NamespaceKeys<\n    IntlMessages,\n    NestedKeyOf<IntlMessages>\n  > = never\n>(\n  namespace?: NestedKey\n): // Explicitly defining the return type is necessary as TypeScript would get it wrong\n{\n  // Default invocation\n  <\n    TargetKey extends MessageKeys<\n      NestedValueOf<\n        {'!': IntlMessages},\n        [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n      >,\n      NestedKeyOf<\n        NestedValueOf<\n          {'!': IntlMessages},\n          [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n        >\n      >\n    >\n  >(\n    key: TargetKey,\n    values?: TranslationValues,\n    formats?: Partial<Formats>\n  ): string;\n\n  // `rich`\n  rich<\n    TargetKey extends MessageKeys<\n      NestedValueOf<\n        {'!': IntlMessages},\n        [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n      >,\n      NestedKeyOf<\n        NestedValueOf<\n          {'!': IntlMessages},\n          [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n        >\n      >\n    >\n  >(\n    key: TargetKey,\n    values?: RichTranslationValues,\n    formats?: Partial<Formats>\n  ): string | ReactElement | ReactNodeArray;\n\n  // `raw`\n  raw<\n    TargetKey extends MessageKeys<\n      NestedValueOf<\n        {'!': IntlMessages},\n        [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n      >,\n      NestedKeyOf<\n        NestedValueOf<\n          {'!': IntlMessages},\n          [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n        >\n      >\n    >\n  >(\n    key: TargetKey\n  ): any;\n} {\n  const context = useIntlContext();\n  const messages = context.messages as IntlMessages;\n\n  // We have to wrap the actual hook so the type inference for the optional\n  // namespace works correctly. See https://stackoverflow.com/a/71529575/343045\n  // The prefix (\"!\") is arbitrary.\n  return useTranslationsImpl<\n    {'!': IntlMessages},\n    [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n  >(\n    {'!': messages},\n    // @ts-ignore\n    namespace ? `!.${namespace}` : '!',\n    '!'\n  );\n}\n","import useIntlContext from './useIntlContext';\n\nexport default function useLocale() {\n  return useIntlContext().locale;\n}\n","import {useState, useEffect} from 'react';\nimport useIntlContext from './useIntlContext';\n\ntype Options = {\n  updateInterval?: number;\n};\n\nfunction getNow() {\n  return new Date();\n}\n\n/**\n * Reading the current date via `new Date()` in components should be avoided, as\n * it causes components to be impure and can lead to flaky tests. Instead, this\n * hook can be used.\n *\n * By default, it returns the time when the component mounts. If `updateInterval`\n * is specified, the value will be updated based on the interval.\n *\n * You can however also return a static value from this hook, if you\n * configure the `now` parameter on the context provider. Note however,\n * that if `updateInterval` is configured in this case, the component\n * will initialize with the global value, but will afterwards update\n * continuously based on the interval.\n *\n * For unit tests, this can be mocked to a constant value. For end-to-end\n * testing, an environment parameter can be passed to the `now` parameter\n * of the provider to mock this to a static value.\n */\nexport default function useNow(options?: Options) {\n  const updateInterval = options?.updateInterval;\n\n  const {now: globalNow} = useIntlContext();\n  const [now, setNow] = useState(globalNow || getNow());\n\n  useEffect(() => {\n    if (!updateInterval) return;\n\n    const intervalId = setInterval(() => {\n      setNow(getNow());\n    }, updateInterval);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [globalNow, updateInterval]);\n\n  return now;\n}\n","import useIntlContext from './useIntlContext';\n\nexport default function useTimeZone() {\n  return useIntlContext().timeZone;\n}\n","import useIntlContext from './useIntlContext';\n\nexport default function useMessages() {\n  return useIntlContext().messages;\n}\n","import {useMemo} from 'react';\nimport createFormatter from '../core/createFormatter';\nimport useIntlContext from './useIntlContext';\n\nexport default function useFormatter() {\n  const {formats, locale, now: globalNow, onError, timeZone} = useIntlContext();\n\n  return useMemo(\n    () =>\n      createFormatter({\n        formats,\n        locale,\n        now: globalNow,\n        onError,\n        timeZone\n      }),\n    [formats, globalNow, locale, onError, timeZone]\n  );\n}\n","import {useMemo} from 'react';\nimport createIntl from '../core/createIntl';\nimport useIntlContext from './useIntlContext';\n\nlet hasWarned = false;\n\n/** @deprecated Switch to `useFormatter` instead. */\nexport default function useIntl() {\n  const {formats, locale, now: globalNow, onError, timeZone} = useIntlContext();\n\n  if (!hasWarned) {\n    hasWarned = true;\n    console.warn(\n      '`useIntl()` is deprecated and will be removed in the next major version. Please switch to `useFormatter()`.'\n    );\n  }\n\n  return useMemo(\n    () =>\n      createIntl({\n        formats,\n        locale,\n        now: globalNow,\n        onError,\n        timeZone\n      }),\n    [formats, globalNow, locale, onError, timeZone]\n  );\n}\n"],"names":["IntlErrorCode","IntlError","_Error","_inheritsLoose","code","originalMessage","_this","message","call","_wrapNativeSuper","Error","setTimeZoneInFormats","formats","timeZone","Object","keys","reduce","acc","key","_extends","convertFormatsToIntlMessageFormat","formatsWithTimeZone","dateTime","date","time","defaultGetMessageFallback","props","namespace","filter","part","join","defaultOnError","error","console","resolvePath","messages","split","forEach","next","prepareTranslationValues","values","length","undefined","transformedValues","index","value","transformed","chunks","result","isValidElement","cloneElement","getMessagesOrError","_ref","_ref$onError","onError","process","retrievedMessages","intlError","MISSING_MESSAGE","createBaseTranslator","_ref2","cachedFormatsByLocale","defaultTranslationValues","globalFormats","_ref2$getMessageFallb","getMessageFallback","locale","messagesOrError","getFallbackFromErrorAndNotify","translateBaseFn","_cachedFormatsByLocal","joinPath","parts","cacheKey","String","messageFormat","errorMessage","Array","isArray","INVALID_MESSAGE","INSUFFICIENT_PATH","IntlMessageFormat","formattedMessage","format","FORMATTING_ERROR","translateFn","rich","raw","resolveNamespace","namespacePrefix","slice","createTranslatorImpl","rest","_objectWithoutPropertiesLoose","_excluded","translator","originalRich","base","apply","arguments","createTranslator","_ref$getMessageFallba","MINUTE","HOUR","DAY","WEEK","MONTH","YEAR","getRelativeTimeFormatConfig","seconds","absValue","Math","abs","unit","round","createFormatter","globalNow","now","resolveFormatOrOptions","typeFormats","formatOrOptions","options","formatName","MISSING_FORMAT","getFormattedValue","formatter","_options","Intl","DateTimeFormat","number","NumberFormat","relativeTime","dateDate","Date","nowDate","getTime","_getRelativeTimeForma","RelativeTimeFormat","numeric","list","ListFormat","createIntl","formatDateTime","formatNumber","formatRelativeTime","IntlContext","createContext","validateMessagesSegment","invalidKeyLabels","parentPath","entries","messageOrMessages","includes","keyLabel","push","validateMessages","INVALID_KEY","getInitializedConfig","finalOnError","finalGetMessageFallback","IntlProvider","children","React","createElement","Provider","useIntlContext","context","useContext","useTranslationsImpl","allMessages","_useIntlContext","cachedFormatsByLocaleRef","useRef","useMemo","translate","current","useTranslations","useLocale","getNow","useNow","updateInterval","_useState","useState","setNow","useEffect","intervalId","setInterval","clearInterval","useTimeZone","useMessages","useFormatter","hasWarned","useIntl","warn"],"mappings":"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"}