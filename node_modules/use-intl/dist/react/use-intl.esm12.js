import { useRef, useMemo } from 'react';
import createBaseTranslator, { getMessagesOrError } from '../core/use-intl.esm7.js';
import resolveNamespace from '../core/use-intl.esm8.js';
import useIntlContext from './use-intl.esm11.js';

function useTranslationsImpl(allMessages, namespace, namespacePrefix) {
  var _useIntlContext = useIntlContext(),
    defaultTranslationValues = _useIntlContext.defaultTranslationValues,
    globalFormats = _useIntlContext.formats,
    getMessageFallback = _useIntlContext.getMessageFallback,
    locale = _useIntlContext.locale,
    onError = _useIntlContext.onError,
    timeZone = _useIntlContext.timeZone;
  // The `namespacePrefix` is part of the type system.
  // See the comment in the hook invocation.
  allMessages = allMessages[namespacePrefix];
  namespace = resolveNamespace(namespace, namespacePrefix);
  var cachedFormatsByLocaleRef = useRef({});
  var messagesOrError = useMemo(function () {
    return getMessagesOrError({
      messages: allMessages,
      namespace: namespace,
      onError: onError
    });
  }, [allMessages, namespace, onError]);
  var translate = useMemo(function () {
    return createBaseTranslator({
      cachedFormatsByLocale: cachedFormatsByLocaleRef.current,
      getMessageFallback: getMessageFallback,
      messagesOrError: messagesOrError,
      defaultTranslationValues: defaultTranslationValues,
      namespace: namespace,
      onError: onError,
      formats: globalFormats,
      locale: locale,
      timeZone: timeZone
    });
  }, [getMessageFallback, messagesOrError, defaultTranslationValues, namespace, onError, globalFormats, locale, timeZone]);
  return translate;
}

export { useTranslationsImpl as default };
//# sourceMappingURL=use-intl.esm12.js.map
