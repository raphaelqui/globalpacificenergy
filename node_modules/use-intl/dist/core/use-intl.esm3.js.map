{"version":3,"file":"use-intl.esm3.js","sources":["../../src/core/createFormatter.tsx"],"sourcesContent":["import DateTimeFormatOptions from './DateTimeFormatOptions';\nimport Formats from './Formats';\nimport IntlError, {IntlErrorCode} from './IntlError';\nimport NumberFormatOptions from './NumberFormatOptions';\nimport TimeZone from './TimeZone';\nimport {defaultOnError} from './defaults';\n\nconst MINUTE = 60;\nconst HOUR = MINUTE * 60;\nconst DAY = HOUR * 24;\nconst WEEK = DAY * 7;\nconst MONTH = DAY * (365 / 12); // Approximation\nconst YEAR = DAY * 365;\n\nfunction getRelativeTimeFormatConfig(seconds: number) {\n  const absValue = Math.abs(seconds);\n  let value, unit: Intl.RelativeTimeFormatUnit;\n\n  // We have to round the resulting values, as `Intl.RelativeTimeFormat`\n  // will include fractions like '2.1 hours ago'.\n\n  if (absValue < MINUTE) {\n    unit = 'second';\n    value = Math.round(seconds);\n  } else if (absValue < HOUR) {\n    unit = 'minute';\n    value = Math.round(seconds / MINUTE);\n  } else if (absValue < DAY) {\n    unit = 'hour';\n    value = Math.round(seconds / HOUR);\n  } else if (absValue < WEEK) {\n    unit = 'day';\n    value = Math.round(seconds / DAY);\n  } else if (absValue < MONTH) {\n    unit = 'week';\n    value = Math.round(seconds / WEEK);\n  } else if (absValue < YEAR) {\n    unit = 'month';\n    value = Math.round(seconds / MONTH);\n  } else {\n    unit = 'year';\n    value = Math.round(seconds / YEAR);\n  }\n\n  return {value, unit};\n}\n\ntype Props = {\n  locale: string;\n  timeZone?: TimeZone;\n  onError?(error: IntlError): void;\n  formats?: Partial<Formats>;\n  now?: Date;\n};\n\nexport default function createFormatter({\n  formats,\n  locale,\n  now: globalNow,\n  onError = defaultOnError,\n  timeZone\n}: Props) {\n  function resolveFormatOrOptions<Options>(\n    typeFormats: Record<string, Options> | undefined,\n    formatOrOptions?: string | Options\n  ) {\n    let options;\n    if (typeof formatOrOptions === 'string') {\n      const formatName = formatOrOptions;\n      options = typeFormats?.[formatName];\n\n      if (!options) {\n        const error = new IntlError(\n          IntlErrorCode.MISSING_FORMAT,\n          process.env.NODE_ENV !== 'production'\n            ? `Format \\`${formatName}\\` is not available. You can configure it on the provider or provide custom options.`\n            : undefined\n        );\n        onError(error);\n        throw error;\n      }\n    } else {\n      options = formatOrOptions;\n    }\n\n    return options;\n  }\n\n  function getFormattedValue<Value, Options>(\n    value: Value,\n    formatOrOptions: string | Options | undefined,\n    typeFormats: Record<string, Options> | undefined,\n    formatter: (options?: Options) => string\n  ) {\n    let options;\n    try {\n      options = resolveFormatOrOptions(typeFormats, formatOrOptions);\n    } catch (error) {\n      return String(value);\n    }\n\n    try {\n      return formatter(options);\n    } catch (error) {\n      onError(\n        new IntlError(IntlErrorCode.FORMATTING_ERROR, (error as Error).message)\n      );\n      return String(value);\n    }\n  }\n\n  function dateTime(\n    /** If a number is supplied, this is interpreted as a UTC timestamp. */\n    value: Date | number,\n    /** If a time zone is supplied, the `value` is converted to that time zone.\n     * Otherwise the user time zone will be used. */\n    formatOrOptions?: string | DateTimeFormatOptions\n  ) {\n    return getFormattedValue(\n      value,\n      formatOrOptions,\n      formats?.dateTime,\n      (options) => {\n        if (timeZone && !options?.timeZone) {\n          options = {...options, timeZone};\n        }\n\n        return new Intl.DateTimeFormat(locale, options).format(value);\n      }\n    );\n  }\n\n  function number(\n    value: number | bigint,\n    formatOrOptions?: string | NumberFormatOptions\n  ) {\n    return getFormattedValue(\n      value,\n      formatOrOptions,\n      formats?.number,\n      (options) => new Intl.NumberFormat(locale, options).format(value)\n    );\n  }\n\n  function relativeTime(\n    /** The date time that needs to be formatted. */\n    date: number | Date,\n    /** The reference point in time to which `date` will be formatted in relation to.  */\n    now?: number | Date\n  ) {\n    try {\n      if (!now) {\n        if (globalNow) {\n          now = globalNow;\n        } else {\n          throw new Error(\n            process.env.NODE_ENV !== 'production'\n              ? `The \\`now\\` parameter wasn't provided and there was no global fallback configured on the provider.`\n              : undefined\n          );\n        }\n      }\n\n      const dateDate = date instanceof Date ? date : new Date(date);\n      const nowDate = now instanceof Date ? now : new Date(now);\n\n      const seconds = (dateDate.getTime() - nowDate.getTime()) / 1000;\n      const {unit, value} = getRelativeTimeFormatConfig(seconds);\n\n      return new Intl.RelativeTimeFormat(locale, {\n        numeric: 'auto'\n      }).format(value, unit);\n    } catch (error) {\n      onError(\n        new IntlError(IntlErrorCode.FORMATTING_ERROR, (error as Error).message)\n      );\n      return String(date);\n    }\n  }\n\n  function list(\n    value: Iterable<string>,\n    formatOrOptions?: string | Intl.ListFormatOptions\n  ) {\n    return getFormattedValue(value, formatOrOptions, formats?.list, (options) =>\n      new Intl.ListFormat(locale, options).format(value)\n    );\n  }\n\n  return {dateTime, number, relativeTime, list};\n}\n"],"names":["MINUTE","HOUR","DAY","WEEK","MONTH","YEAR","getRelativeTimeFormatConfig","seconds","absValue","Math","abs","value","unit","round","createFormatter","_ref","formats","locale","globalNow","now","_ref$onError","onError","defaultOnError","timeZone","resolveFormatOrOptions","typeFormats","formatOrOptions","options","formatName","error","IntlError","IntlErrorCode","MISSING_FORMAT","process","env","NODE_ENV","undefined","getFormattedValue","formatter","String","FORMATTING_ERROR","message","dateTime","_options","_extends","Intl","DateTimeFormat","format","number","NumberFormat","relativeTime","date","Error","dateDate","Date","nowDate","getTime","_getRelativeTimeForma","RelativeTimeFormat","numeric","list","ListFormat"],"mappings":"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"}