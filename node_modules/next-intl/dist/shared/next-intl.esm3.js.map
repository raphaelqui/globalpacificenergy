{"version":3,"file":"next-intl.esm3.js","sources":["../../src/shared/BaseLink.tsx"],"sourcesContent":["'use client';\n\nimport NextLink from 'next/link';\nimport {usePathname} from 'next/navigation';\nimport React, {ComponentProps, forwardRef, useEffect, useState} from 'react';\nimport useClientLocale from '../client/useClientLocale';\nimport {isLocalHref, localizeHref, prefixHref} from './utils';\n\ntype Props = Omit<ComponentProps<typeof NextLink>, 'locale'> & {\n  locale: string;\n};\n\nfunction BaseLink({href, locale, prefetch, ...rest}: Props, ref: Props['ref']) {\n  // The types aren't entirely correct here. Outside of Next.js\n  // `useParams` can be called, but the return type is `null`.\n  const pathname = usePathname() as ReturnType<typeof usePathname> | null;\n\n  const defaultLocale = useClientLocale();\n  const isChangingLocale = locale !== defaultLocale;\n\n  const [localizedHref, setLocalizedHref] = useState<typeof href>(() =>\n    isLocalHref(href) && locale\n      ? // Potentially the href shouldn't be prefixed, but to determine this we\n        // need a) the default locale and b) the information if we use prefixed\n        // routing. During the server side render (both in RSC as well as SSR),\n        // we don't have this information. Therefore we always prefix the href\n        // since this will always result in a valid URL, even if it might cause\n        // a redirect. This is better than pointing to a non-localized href\n        // during the server render, which would potentially be wrong. The final\n        // href is determined in the effect below.\n        prefixHref(href, locale)\n      : href\n  );\n\n  useEffect(() => {\n    if (!pathname) return;\n\n    setLocalizedHref(\n      localizeHref(href, locale, defaultLocale, pathname ?? undefined)\n    );\n  }, [defaultLocale, href, locale, pathname]);\n\n  if (isChangingLocale) {\n    if (prefetch && process.env.NODE_ENV !== 'production') {\n      console.error(\n        'The `prefetch` prop is currently not supported when using the `locale` prop on `Link` to switch the locale.`'\n      );\n    }\n    prefetch = false;\n  }\n\n  return (\n    <NextLink ref={ref} href={localizedHref} prefetch={prefetch} {...rest} />\n  );\n}\n\nexport default forwardRef(BaseLink);\n"],"names":["_excluded","BaseLink","_ref","ref","href","locale","prefetch","rest","_objectWithoutPropertiesLoose","pathname","usePathname","defaultLocale","useClientLocale","isChangingLocale","_useState","useState","isLocalHref","prefixHref","localizedHref","setLocalizedHref","useEffect","localizeHref","undefined","process","env","NODE_ENV","console","error","React","createElement","NextLink","_extends","forwardRef"],"mappings":";;;;;;;AAAa,IAAAA,SAAA,GAAA,CAAA,MAAA,EAAA,QAAA,EAAA,UAAA,CAAA,CAAA;AAYb,SAASC,QAAQA,CAAAC,IAAA,EAA2CC,GAAiB,EAAA;AAAA,EAAA,IAA1DC,IAAI,GAAAF,IAAA,CAAJE,IAAI;IAAEC,MAAM,GAAAH,IAAA,CAANG,MAAM;IAAEC,QAAQ,GAAAJ,IAAA,CAARI,QAAQ;AAAKC,IAAAA,IAAI,GAAAC,6BAAA,CAAAN,IAAA,EAAAF,SAAA,CAAA,CAAA;AAChD;AACA;AACA,EAAA,IAAMS,QAAQ,GAAGC,WAAW,EAA2C,CAAA;AAEvE,EAAA,IAAMC,aAAa,GAAGC,eAAe,EAAE,CAAA;AACvC,EAAA,IAAMC,gBAAgB,GAAGR,MAAM,KAAKM,aAAa,CAAA;EAEjD,IAAAG,SAAA,GAA0CC,QAAQ,CAAc,YAAA;AAAA,MAAA,OAC9DC,WAAW,CAACZ,IAAI,CAAC,IAAIC,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAY,MAAAA,UAAU,CAACb,IAAI,EAAEC,MAAM,CAAC,GACxBD,IAAI,CAAA;KACT,CAAA;AAZMc,IAAAA,aAAa,GAAAJ,SAAA,CAAA,CAAA,CAAA;AAAEK,IAAAA,gBAAgB,GAAAL,SAAA,CAAA,CAAA,CAAA,CAAA;AActCM,EAAAA,SAAS,CAAC,YAAK;IACb,IAAI,CAACX,QAAQ,EAAE,OAAA;AAEfU,IAAAA,gBAAgB,CACdE,YAAY,CAACjB,IAAI,EAAEC,MAAM,EAAEM,aAAa,EAAEF,QAAQ,IAARA,IAAAA,GAAAA,QAAQ,GAAIa,SAAS,CAAC,CACjE,CAAA;GACF,EAAE,CAACX,aAAa,EAAEP,IAAI,EAAEC,MAAM,EAAEI,QAAQ,CAAC,CAAC,CAAA;AAE3C,EAAA,IAAII,gBAAgB,EAAE;IACpB,IAAIP,QAAQ,IAAIiB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;AACrDC,MAAAA,OAAO,CAACC,KAAK,CACX,8GAA8G,CAC/G,CAAA;AACF,KAAA;AACDrB,IAAAA,QAAQ,GAAG,KAAK,CAAA;AACjB,GAAA;AAED,EAAA,OACEsB,KAAC,CAAAC,aAAA,CAAAC,QAAQ,EAAAC,QAAA,CAAA;AAAC5B,IAAAA,GAAG,EAAEA,GAAG;AAAEC,IAAAA,IAAI,EAAEc,aAAa;AAAEZ,IAAAA,QAAQ,EAAEA,QAAAA;GAAcC,EAAAA,IAAI,CAAA,CAAI,CAAA;AAE7E,CAAA;AAEA,iBAAeyB,aAAAA,UAAU,CAAC/B,QAAQ,CAAC;;;;"}