import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../_virtual/next-intl.esm.js';
import NextLink from 'next/link';
import { usePathname } from 'next/navigation';
import React, { forwardRef, useState, useEffect } from 'react';
import useClientLocale from '../client/next-intl.esm2.js';
import { isLocalHref, prefixHref, localizeHref } from './next-intl.esm2.js';

var _excluded = ["href", "locale", "prefetch"];
function BaseLink(_ref, ref) {
  var href = _ref.href,
    locale = _ref.locale,
    prefetch = _ref.prefetch,
    rest = _objectWithoutPropertiesLoose(_ref, _excluded);
  // The types aren't entirely correct here. Outside of Next.js
  // `useParams` can be called, but the return type is `null`.
  var pathname = usePathname();
  var defaultLocale = useClientLocale();
  var isChangingLocale = locale !== defaultLocale;
  var _useState = useState(function () {
      return isLocalHref(href) && locale ?
      // Potentially the href shouldn't be prefixed, but to determine this we
      // need a) the default locale and b) the information if we use prefixed
      // routing. During the server side render (both in RSC as well as SSR),
      // we don't have this information. Therefore we always prefix the href
      // since this will always result in a valid URL, even if it might cause
      // a redirect. This is better than pointing to a non-localized href
      // during the server render, which would potentially be wrong. The final
      // href is determined in the effect below.
      prefixHref(href, locale) : href;
    }),
    localizedHref = _useState[0],
    setLocalizedHref = _useState[1];
  useEffect(function () {
    if (!pathname) return;
    setLocalizedHref(localizeHref(href, locale, defaultLocale, pathname != null ? pathname : undefined));
  }, [defaultLocale, href, locale, pathname]);
  if (isChangingLocale) {
    if (prefetch && process.env.NODE_ENV !== 'production') {
      console.error('The `prefetch` prop is currently not supported when using the `locale` prop on `Link` to switch the locale.`');
    }
    prefetch = false;
  }
  return React.createElement(NextLink, _extends({
    ref: ref,
    href: localizedHref,
    prefetch: prefetch
  }, rest));
}
var BaseLink$1 = /*#__PURE__*/forwardRef(BaseLink);

export { BaseLink$1 as default };
//# sourceMappingURL=next-intl.esm3.js.map
