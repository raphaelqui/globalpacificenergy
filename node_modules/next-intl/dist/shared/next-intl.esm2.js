import { extends as _extends } from '../_virtual/next-intl.esm.js';

function isRelativeHref(href) {
  var pathname = typeof href === 'object' ? href.pathname : href;
  return pathname != null && !pathname.startsWith('/');
}
function isLocalHref(href) {
  if (typeof href === 'object') {
    return href.host == null && href.hostname == null;
  } else {
    var hasProtocol = /^[a-z]+:/i.test(href);
    return !hasProtocol;
  }
}
function localizeHref(href, locale, defaultLocale, pathname) {
  if (defaultLocale === void 0) {
    defaultLocale = locale;
  }
  if (!isLocalHref(href) || isRelativeHref(href)) {
    return href;
  }
  var isSwitchingLocale = locale !== defaultLocale;
  var isPathnamePrefixed = locale == null || hasPathnamePrefixed(locale, pathname);
  var shouldPrefix = isPathnamePrefixed || isSwitchingLocale;
  if (shouldPrefix && locale != null) {
    return prefixHref(href, locale);
  }
  return href;
}
function prefixHref(href, locale) {
  var prefixedHref;
  if (typeof href === 'string') {
    prefixedHref = localizePathname(locale, href);
  } else {
    prefixedHref = _extends({}, href);
    if (href.pathname) {
      prefixedHref.pathname = localizePathname(locale, href.pathname);
    }
  }
  return prefixedHref;
}
function localizePathname(locale, pathname) {
  var localizedHref = '/' + locale;
  if (pathname !== '/') {
    localizedHref += pathname;
  }
  return localizedHref;
}
function hasPathnamePrefixed(locale, pathname) {
  var prefix = "/" + locale;
  return pathname === prefix || pathname.startsWith(prefix + "/");
}

export { hasPathnamePrefixed, isLocalHref, isRelativeHref, localizeHref, localizePathname, prefixHref };
//# sourceMappingURL=next-intl.esm2.js.map
