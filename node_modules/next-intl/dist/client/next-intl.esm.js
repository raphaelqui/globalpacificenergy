import { extends as _extends, objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../_virtual/next-intl.esm.js';
import { useRouter as useRouter$1 } from 'next/navigation';
import { useMemo } from 'react';
import { localizeHref } from '../shared/next-intl.esm2.js';
import useClientLocale from './next-intl.esm2.js';

var _excluded = ["locale"],
  _excluded2 = ["locale"],
  _excluded3 = ["locale"];
/**
 * Returns a wrapped instance of `useRouter` from `next/navigation` that
 * will automatically localize the `href` parameters it receives.
 *
 * @example
 * ```tsx
 * 'use client';
 *
 * import {useRouter} from 'next-intl/client';
 *
 * const router = useRouter();
 *
 * // When the user is on `/en`, the router will navigate to `/en/about`
 * router.push('/about');
 *
 * // Optionally, you can switch the locale by passing the second argument
 * router.push('/about', {locale: 'de'});
 * ```
 */
function useRouter() {
  var router = useRouter$1();
  var locale = useClientLocale();
  return useMemo(function () {
    function localize(href, nextLocale) {
      return localizeHref(href, nextLocale || locale, locale, window.location.pathname);
    }
    return _extends({}, router, {
      push: function push(href, options) {
        var _ref = options || {},
          nextLocale = _ref.locale,
          rest = _objectWithoutPropertiesLoose(_ref, _excluded);
        var args = [localize(href, nextLocale)];
        if (Object.keys(rest).length > 0) {
          args.push(rest);
        }
        return router.push.apply(router, args);
      },
      replace: function replace(href, options) {
        var _ref2 = options || {},
          nextLocale = _ref2.locale,
          rest = _objectWithoutPropertiesLoose(_ref2, _excluded2);
        var args = [localize(href, nextLocale)];
        if (Object.keys(rest).length > 0) {
          args.push(rest);
        }
        return router.replace.apply(router, args);
      },
      prefetch: function prefetch(href, options) {
        var _ref3 = options || {},
          nextLocale = _ref3.locale,
          rest = _objectWithoutPropertiesLoose(_ref3, _excluded3);
        var args = [localize(href, nextLocale)];
        if (Object.keys(rest).length > 0) {
          // @ts-expect-error TypeScript thinks `rest` can be an empty object
          args.push(rest);
        }
        return router.prefetch.apply(router, args);
      }
    });
  }, [locale, router]);
}

export { useRouter as default };
//# sourceMappingURL=next-intl.esm.js.map
