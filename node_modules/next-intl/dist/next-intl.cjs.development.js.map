{"version":3,"file":"next-intl.cjs.development.js","sources":["../src/shared/constants.tsx","../src/client/useClientLocale.tsx","../src/shared/utils.tsx","../src/shared/BaseLink.tsx","../src/link/Link.tsx","../src/react-client/Link.tsx","../src/shared/NextIntlClientProvider.tsx","../src/client/useRouter.tsx","../src/react-client/useLocalizedRouter.tsx","../src/react-client/index.tsx"],"sourcesContent":["// Reuse the legacy cookie name\n// https://nextjs.org/docs/advanced-features/i18n-routing#leveraging-the-next_locale-cookie\nexport const COOKIE_LOCALE_NAME = 'NEXT_LOCALE';\n\n// Should take precedence over the cookie\nexport const HEADER_LOCALE_NAME = 'X-NEXT-INTL-LOCALE';\n\n// In a URL like \"/en-US/about\", the locale segment is \"en-US\"\nexport const LOCALE_SEGMENT_NAME = 'locale';\n","import {useParams} from 'next/navigation';\nimport {useLocale} from 'use-intl';\nimport {LOCALE_SEGMENT_NAME} from '../shared/constants';\n\nexport default function useClientLocale(): string {\n  let locale;\n\n  // The types aren't entirely correct here. Outside of Next.js\n  // `useParams` can be called, but the return type is `null`.\n  const params = useParams() as ReturnType<typeof useParams> | null;\n\n  if (params?.[LOCALE_SEGMENT_NAME]) {\n    locale = params[LOCALE_SEGMENT_NAME];\n  } else {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- Reading from context conditionally is fine\n    locale = useLocale();\n  }\n\n  return locale;\n}\n","import {UrlObject} from 'url';\nimport NextLink from 'next/link';\nimport {ComponentProps} from 'react';\n\ntype Href = ComponentProps<typeof NextLink>['href'];\n\nexport function isRelativeHref(href: Href) {\n  const pathname = typeof href === 'object' ? href.pathname : href;\n  return pathname != null && !pathname.startsWith('/');\n}\n\nexport function isLocalHref(href: Href) {\n  if (typeof href === 'object') {\n    return href.host == null && href.hostname == null;\n  } else {\n    const hasProtocol = /^[a-z]+:/i.test(href);\n    return !hasProtocol;\n  }\n}\n\nexport function localizeHref(\n  href: string,\n  locale: string,\n  defaultLocale: string,\n  pathname: string\n): string;\nexport function localizeHref(\n  href: UrlObject | string,\n  locale: string,\n  defaultLocale: string,\n  pathname: string\n): UrlObject | string;\nexport function localizeHref(\n  href: UrlObject | string,\n  locale: string,\n  defaultLocale: string = locale,\n  pathname: string\n) {\n  if (!isLocalHref(href) || isRelativeHref(href)) {\n    return href;\n  }\n\n  const isSwitchingLocale = locale !== defaultLocale;\n  const isPathnamePrefixed =\n    locale == null || hasPathnamePrefixed(locale, pathname);\n  const shouldPrefix = isPathnamePrefixed || isSwitchingLocale;\n\n  if (shouldPrefix && locale != null) {\n    return prefixHref(href, locale);\n  }\n\n  return href;\n}\n\nexport function prefixHref(href: string, locale: string): string;\nexport function prefixHref(\n  href: UrlObject | string,\n  locale: string\n): UrlObject | string;\nexport function prefixHref(href: UrlObject | string, locale: string) {\n  let prefixedHref;\n  if (typeof href === 'string') {\n    prefixedHref = localizePathname(locale, href);\n  } else {\n    prefixedHref = {...href};\n    if (href.pathname) {\n      prefixedHref.pathname = localizePathname(locale, href.pathname);\n    }\n  }\n\n  return prefixedHref;\n}\n\nexport function unlocalizePathname(pathname: string, locale: string) {\n  return pathname.replace(new RegExp(`^/${locale}`), '') || '/';\n}\n\nexport function localizePathname(locale: string, pathname: string) {\n  let localizedHref = '/' + locale;\n\n  if (pathname !== '/') {\n    localizedHref += pathname;\n  }\n\n  return localizedHref;\n}\n\nexport function hasPathnamePrefixed(locale: string, pathname: string) {\n  const prefix = `/${locale}`;\n  return pathname === prefix || pathname.startsWith(`${prefix}/`);\n}\n","'use client';\n\nimport NextLink from 'next/link';\nimport {usePathname} from 'next/navigation';\nimport React, {ComponentProps, forwardRef, useEffect, useState} from 'react';\nimport useClientLocale from '../client/useClientLocale';\nimport {isLocalHref, localizeHref, prefixHref} from './utils';\n\ntype Props = Omit<ComponentProps<typeof NextLink>, 'locale'> & {\n  locale: string;\n};\n\nfunction BaseLink({href, locale, prefetch, ...rest}: Props, ref: Props['ref']) {\n  // The types aren't entirely correct here. Outside of Next.js\n  // `useParams` can be called, but the return type is `null`.\n  const pathname = usePathname() as ReturnType<typeof usePathname> | null;\n\n  const defaultLocale = useClientLocale();\n  const isChangingLocale = locale !== defaultLocale;\n\n  const [localizedHref, setLocalizedHref] = useState<typeof href>(() =>\n    isLocalHref(href) && locale\n      ? // Potentially the href shouldn't be prefixed, but to determine this we\n        // need a) the default locale and b) the information if we use prefixed\n        // routing. During the server side render (both in RSC as well as SSR),\n        // we don't have this information. Therefore we always prefix the href\n        // since this will always result in a valid URL, even if it might cause\n        // a redirect. This is better than pointing to a non-localized href\n        // during the server render, which would potentially be wrong. The final\n        // href is determined in the effect below.\n        prefixHref(href, locale)\n      : href\n  );\n\n  useEffect(() => {\n    if (!pathname) return;\n\n    setLocalizedHref(\n      localizeHref(href, locale, defaultLocale, pathname ?? undefined)\n    );\n  }, [defaultLocale, href, locale, pathname]);\n\n  if (isChangingLocale) {\n    if (prefetch && process.env.NODE_ENV !== 'production') {\n      console.error(\n        'The `prefetch` prop is currently not supported when using the `locale` prop on `Link` to switch the locale.`'\n      );\n    }\n    prefetch = false;\n  }\n\n  return (\n    <NextLink ref={ref} href={localizedHref} prefetch={prefetch} {...rest} />\n  );\n}\n\nexport default forwardRef(BaseLink);\n","import React, {ComponentProps, forwardRef} from 'react';\nimport useClientLocale from '../client/useClientLocale';\nimport BaseLink from '../shared/BaseLink';\n\ntype Props = Omit<ComponentProps<typeof BaseLink>, 'locale'> & {\n  locale?: string;\n};\n\nfunction Link({locale, ...rest}: Props, ref: Props['ref']) {\n  const defaultLocale = useClientLocale();\n  return <BaseLink ref={ref} locale={locale || defaultLocale} {...rest} />;\n}\n\n/**\n * Wraps `next/link` and prefixes the `href` with the current locale if\n * necessary.\n *\n * @example\n * ```tsx\n * import {Link} from 'next-intl';\n *\n * // When the user is on `/en`, the link will point to `/en/about`\n * <Link href=\"/about\">About</Link>\n *\n * // You can override the `locale` to switch to another language\n * <Link href=\"/\" locale=\"de\">Switch to German</Link>\n * ```\n *\n * Note that when a `locale` prop is passed to switch the locale, the `prefetch`\n * prop is not supported. This is because Next.js would prefetch the page and\n * the `set-cookie` response header would cause the locale cookie on the current\n * page to be overwritten before the user even decides to change the locale.\n */\nexport default forwardRef(Link);\n","import React, {ComponentProps} from 'react';\nimport Link from '../link';\n\n// TODO: Only available for backwards compatibility\n// during the beta, remove for stable release\n\nlet hasWarned = false;\n\n/** @deprecated Is available as `import Link from 'next-intl/link'` now. */\nexport default function LinkDeprecated(props: ComponentProps<typeof Link>) {\n  if (!hasWarned) {\n    console.warn(\n      `\\n\\nDEPRECATION WARNING: The import for \\`Link\\` from next-intl has changed.\n\nPreviously: import {Link} from 'next-intl';\nNow:        import Link from 'next-intl/link';\n\nPlease upgrade your import accordingly. See also https://next-intl-docs.vercel.app/docs/routing/navigation#link\\n\\n`\n    );\n    hasWarned = true;\n  }\n\n  return <Link {...props} />;\n}\n","'use client';\n\nimport {useRouter} from 'next/router';\nimport React, {ComponentProps} from 'react';\nimport {IntlProvider} from 'use-intl';\n\ntype Props = Omit<ComponentProps<typeof IntlProvider>, 'locale' | 'now'> & {\n  locale?: string;\n  /** If a string is supplied, make sure this conforms to the ISO 8601 format (YYYY-MM-DDTHH:mm:ss.sssZ */\n  now?: Date | string;\n};\n\nexport default function NextIntlClientProvider({\n  children,\n  locale,\n  now,\n  ...rest\n}: Props) {\n  let router;\n  try {\n    // Reading from context is practically ok to do conditionally\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    router = useRouter();\n  } catch (error) {\n    // Calling `useRouter` is not supported in the app folder\n  }\n\n  // The router can be undefined if used in a context outside\n  // of Next.js (e.g. unit tests, Storybook, ...)\n  if (!locale && router) {\n    locale = router.locale;\n  }\n\n  // Currently RSC serialize dates to strings, therefore make sure we have\n  // a date object. We might be able to remove this once more types have\n  // first-class serialization support (https://github.com/facebook/react/issues/25687)\n  if (typeof now === 'string') {\n    now = new Date(now);\n  }\n\n  if (!locale) {\n    throw new Error(\n      process.env.NODE_ENV !== 'production'\n        ? \"Couldn't determine locale. Please pass an explicit `locale` prop the provider, or if you're using the `pages` folder, use internationalized routing (https://nextjs.org/docs/advanced-features/i18n-routing).\"\n        : undefined\n    );\n  }\n\n  return (\n    <IntlProvider locale={locale} now={now} {...rest}>\n      {children}\n    </IntlProvider>\n  );\n}\n","import {useRouter as useNextRouter} from 'next/navigation';\nimport {useMemo} from 'react';\nimport {localizeHref} from '../shared/utils';\nimport useClientLocale from './useClientLocale';\n\ntype IntlNavigateOptions = {\n  locale?: string;\n};\n\n/**\n * Returns a wrapped instance of `useRouter` from `next/navigation` that\n * will automatically localize the `href` parameters it receives.\n *\n * @example\n * ```tsx\n * 'use client';\n *\n * import {useRouter} from 'next-intl/client';\n *\n * const router = useRouter();\n *\n * // When the user is on `/en`, the router will navigate to `/en/about`\n * router.push('/about');\n *\n * // Optionally, you can switch the locale by passing the second argument\n * router.push('/about', {locale: 'de'});\n * ```\n */\nexport default function useRouter() {\n  const router = useNextRouter();\n  const locale = useClientLocale();\n\n  return useMemo(() => {\n    function localize(href: string, nextLocale?: string) {\n      return localizeHref(\n        href,\n        nextLocale || locale,\n        locale,\n        window.location.pathname\n      );\n    }\n\n    return {\n      ...router,\n      push(\n        href: string,\n        options?: Parameters<typeof router.push>[1] & IntlNavigateOptions\n      ) {\n        const {locale: nextLocale, ...rest} = options || {};\n        const args: [\n          href: string,\n          options?: Parameters<typeof router.push>[1]\n        ] = [localize(href, nextLocale)];\n        if (Object.keys(rest).length > 0) {\n          args.push(rest);\n        }\n        return router.push(...args);\n      },\n\n      replace(\n        href: string,\n        options?: Parameters<typeof router.replace>[1] & IntlNavigateOptions\n      ) {\n        const {locale: nextLocale, ...rest} = options || {};\n        const args: [\n          href: string,\n          options?: Parameters<typeof router.replace>[1]\n        ] = [localize(href, nextLocale)];\n        if (Object.keys(rest).length > 0) {\n          args.push(rest);\n        }\n        return router.replace(...args);\n      },\n\n      prefetch(\n        href: string,\n        options?: Parameters<typeof router.prefetch>[1] & IntlNavigateOptions\n      ) {\n        const {locale: nextLocale, ...rest} = options || {};\n        const args: [\n          href: string,\n          options?: Parameters<typeof router.prefetch>[1]\n        ] = [localize(href, nextLocale)];\n        if (Object.keys(rest).length > 0) {\n          // @ts-expect-error TypeScript thinks `rest` can be an empty object\n          args.push(rest);\n        }\n        return router.prefetch(...args);\n      }\n    };\n  }, [locale, router]);\n}\n","import useRouter from '../client/useRouter';\n\n// TODO: Only available for backwards compatibility\n// during the beta, remove for stable release\n\nlet hasWarned = false;\n\nexport default function useLocalizedRouterDeprecated() {\n  if (!hasWarned) {\n    console.warn(\n      `\\n\\nDEPRECATION WARNING: The \\`useLocalizedRouter\\` import from \\`next-intl\\` is deprecated and will be removed in the stable release of next-intl. Please import \\`useLocalizedRouter\\` from \\`next-intl/client\\` instead. See https://next-intl-docs.vercel.app/docs/getting-started/app-router-server-components\\n\\n`\n    );\n    hasWarned = true;\n  }\n\n  return useRouter();\n}\n","/**\n * This is the main entry file when non-'react-server'\n * environments import from 'next-intl'.\n *\n * Maintainer notes:\n * - Make sure this mirrors the API from 'react-server'.\n * - Make sure everything exported from this module is\n *   supported in all Next.js versions that are supported.\n */\n\nimport Link from './Link';\n\nexport * from 'use-intl';\nexport {default as NextIntlClientProvider} from '../shared/NextIntlClientProvider';\n\n// Legacy export (TBD if we'll deprecate this in favour of `NextIntlClientProvider`)\nexport {default as NextIntlProvider} from '../shared/NextIntlClientProvider';\n\n/** @deprecated Is available as `import Link from 'next-intl/link'` now. */\nexport const LocalizedLink = Link;\nexport {default as Link} from './Link';\n\nexport {default as useLocalizedRouter} from './useLocalizedRouter';\n"],"names":["LOCALE_SEGMENT_NAME","useClientLocale","locale","params","useParams","useLocale","isRelativeHref","href","pathname","startsWith","isLocalHref","host","hostname","hasProtocol","test","localizeHref","defaultLocale","isSwitchingLocale","isPathnamePrefixed","hasPathnamePrefixed","shouldPrefix","prefixHref","prefixedHref","localizePathname","_extends","localizedHref","prefix","_excluded","BaseLink","_ref","ref","prefetch","rest","_objectWithoutPropertiesLoose","usePathname","isChangingLocale","_useState","useState","setLocalizedHref","useEffect","undefined","process","console","error","React","createElement","NextLink","forwardRef","Link","hasWarned","LinkDeprecated","props","warn","NextIntlClientProvider","children","now","router","useRouter","Date","Error","IntlProvider","useNextRouter","useMemo","localize","nextLocale","window","location","push","options","args","Object","keys","length","apply","replace","_ref2","_excluded2","_ref3","_excluded3","useLocalizedRouterDeprecated","LocalizedLink"],"mappings":"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"}