import type { getRequestConfig as getRequestConfig_type, getLocale as getLocale_type } from '..';
export declare const getRequestConfig: typeof getRequestConfig_type;
export declare const getIntl: () => Promise<{
    formatDateTime: (value: number | Date, formatOrOptions?: string | import("use-intl/dist/src/core/DateTimeFormatOptions").default | undefined) => string;
    formatNumber: (value: number | bigint, formatOrOptions?: string | import("use-intl").NumberFormatOptions | undefined) => string;
    formatRelativeTime: (date: number | Date, now?: number | Date | undefined) => string;
}>;
export declare const getFormatter: (locale?: string | {
    locale: string;
} | undefined) => Promise<{
    dateTime: (value: number | Date, formatOrOptions?: string | import("use-intl/dist/src/core/DateTimeFormatOptions").default | undefined) => string;
    number: (value: number | bigint, formatOrOptions?: string | import("use-intl").NumberFormatOptions | undefined) => string;
    relativeTime: (date: number | Date, now?: number | Date | undefined) => string;
    list: (value: Iterable<string>, formatOrOptions?: string | Intl.ListFormatOptions | undefined) => string;
}>;
export declare const getLocale: typeof getLocale_type;
export declare const getNow: (locale?: string | {
    locale: string;
} | undefined) => Promise<Date>;
export declare const getTimeZone: (locale?: string | {
    locale: string;
} | undefined) => Promise<import("use-intl/dist/core/TimeZone").default | undefined>;
export declare const getTranslations: <NestedKey extends string = never>(namespace?: NestedKey | undefined) => Promise<{
    <TargetKey extends import("use-intl/dist/src/core/utils/MessageKeys").default<import("use-intl/dist/src/core/utils/NestedValueOf").default<{
        '!': IntlMessages;
    }, [NestedKey] extends [never] ? "!" : `!.${NestedKey}`>, import("use-intl/dist/src/core/utils/NestedKeyOf").default<import("use-intl/dist/src/core/utils/NestedValueOf").default<{
        '!': IntlMessages;
    }, [NestedKey] extends [never] ? "!" : `!.${NestedKey}`>>>>(key: TargetKey, values?: import("use-intl/dist/src/core/TranslationValues").default | undefined, formats?: Partial<import("use-intl/dist/src/core/Formats").default> | undefined): string;
    rich<TargetKey_1 extends import("use-intl/dist/src/core/utils/MessageKeys").default<import("use-intl/dist/src/core/utils/NestedValueOf").default<{
        '!': IntlMessages;
    }, [NestedKey] extends [never] ? "!" : `!.${NestedKey}`>, import("use-intl/dist/src/core/utils/NestedKeyOf").default<import("use-intl/dist/src/core/utils/NestedValueOf").default<{
        '!': IntlMessages;
    }, [NestedKey] extends [never] ? "!" : `!.${NestedKey}`>>>>(key: TargetKey_1, values?: import("use-intl/dist/src/core/createTranslatorImpl").CoreRichTranslationValues | undefined, formats?: Partial<import("use-intl/dist/src/core/Formats").default> | undefined): string;
    raw<TargetKey_2 extends import("use-intl/dist/src/core/utils/MessageKeys").default<import("use-intl/dist/src/core/utils/NestedValueOf").default<{
        '!': IntlMessages;
    }, [NestedKey] extends [never] ? "!" : `!.${NestedKey}`>, import("use-intl/dist/src/core/utils/NestedKeyOf").default<import("use-intl/dist/src/core/utils/NestedValueOf").default<{
        '!': IntlMessages;
    }, [NestedKey] extends [never] ? "!" : `!.${NestedKey}`>>>>(key: TargetKey_2): any;
}>;
export declare const getTranslator: <NestedKey extends string = never>(locale: string | {
    namespace?: NestedKey | undefined;
    locale: string;
}, namespace?: NestedKey | undefined) => Promise<{
    <TargetKey extends import("use-intl/dist/src/core/utils/MessageKeys").default<import("use-intl/dist/src/core/utils/NestedValueOf").default<{
        '!': IntlMessages;
    }, [NestedKey] extends [never] ? "!" : `!.${NestedKey}`>, import("use-intl/dist/src/core/utils/NestedKeyOf").default<import("use-intl/dist/src/core/utils/NestedValueOf").default<{
        '!': IntlMessages;
    }, [NestedKey] extends [never] ? "!" : `!.${NestedKey}`>>>>(key: TargetKey, values?: import("use-intl/dist/src/core/TranslationValues").default | undefined, formats?: Partial<import("use-intl/dist/src/core/Formats").default> | undefined): string;
    rich<TargetKey_1 extends import("use-intl/dist/src/core/utils/MessageKeys").default<import("use-intl/dist/src/core/utils/NestedValueOf").default<{
        '!': IntlMessages;
    }, [NestedKey] extends [never] ? "!" : `!.${NestedKey}`>, import("use-intl/dist/src/core/utils/NestedKeyOf").default<import("use-intl/dist/src/core/utils/NestedValueOf").default<{
        '!': IntlMessages;
    }, [NestedKey] extends [never] ? "!" : `!.${NestedKey}`>>>>(key: TargetKey_1, values?: import("use-intl/dist/src/core/createTranslatorImpl").CoreRichTranslationValues | undefined, formats?: Partial<import("use-intl/dist/src/core/Formats").default> | undefined): string;
    raw<TargetKey_2 extends import("use-intl/dist/src/core/utils/MessageKeys").default<import("use-intl/dist/src/core/utils/NestedValueOf").default<{
        '!': IntlMessages;
    }, [NestedKey] extends [never] ? "!" : `!.${NestedKey}`>, import("use-intl/dist/src/core/utils/NestedKeyOf").default<import("use-intl/dist/src/core/utils/NestedValueOf").default<{
        '!': IntlMessages;
    }, [NestedKey] extends [never] ? "!" : `!.${NestedKey}`>>>>(key: TargetKey_2): any;
}>;
export declare const getMessages: (locale: string) => Promise<import("use-intl/dist/src/core/AbstractIntlMessages").default | undefined>;
export { default as redirect } from './redirect';
